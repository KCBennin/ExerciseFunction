#lang racket

(require srfi/1)
(require srfi/13)
(require srfi/48)

(define descriptions '((1 "You are on the Plains")
                       (2 "You are in the Highlands")
                       (3 "You are in the Lowlands")
                       (4 "You are in the Eastlands")
                       (5 "You are in the Westlands")
                       (6 "You are in the Swamp lands")
                       (7 "You have entered the Elf Forest")
                       (8 "You are in the Dwarf Kingdom")
                       (9 "You are on Dragon Stone")
                       (10 "You have entered Tamaray")
                       (11 "You are in the Outlands")
                       (12 "You are in the Skylands!")))


(define weapons      '((1 "A Staff, a Chair, a Candle")
                       (2 "A Sword")
                       (2 "A Rope, a Ladder, a Lance")
                       (2 "A Hammer, a Spear, an Axe, Arrows")
                       (3 "A Phoenix, a Unicorn")
                       (4 "A Mountain, a High Tower, a Cliff Edge")
                       (5 "Plant, a Tree")
                       (6 "Grow Potion, Strength Potion, Speed Potion")
                       (6 "Invisibilty Potion, Disguise Potion")
                       (6 "Bottles of Water, Food")
                       (7 "Food Supplies")
                       (7 "Fire, a Lantern, a Flame")
                       (7 "A Bonfire")
                       (8 "A Castle, a Barnyard")
                       (8 "An Old Hut, a Shack")
                       (9 "A Tree house")
                       (9 "Arrow men, Spear men")
                       (10 "Sword men, Tree men")
                       (10 "A Falcon, an Owl, a Sparrow")
                       (11 "A flock of Eagles")
                       (11 "A Shark, A Whale,")
                       (12 "A pod of Dolphins")))


(define enemies '((3 "A Dragon")
                  (9 "A Monster")
                  (11 "The Wizard")))


;; Game Actions and Options
(define look '(((directions) look) ((look) look) ((examine room) look)))
(define fight '(((attack) fight) ((battle) fight) ((destroy) destroy)))
(define run '(((go) run) ((speed) run) ((go now) run)))
(define food '(((food) food) ((eat) food) ((food time) food)))
(define climb '(((climb) climb) ((go up) climb) ((upwards) climb)))
(define partner '(((partner) partner) ((friend) partner) ((back up) partner)))
(define light '(((light) light) ((fire) light) ((light up) fire)))
(define arsenal '(((pick) arsenal) ((weapon) arsenal) ((arm up) arsenal)))

(define quit '(((exit game) quit) ((quit game) quit) ((exit) quit) ((quit) quit)))
(define actions `(,@look ,@quit ,@run ,@fight ,@climb ,@partner
                         ,@light ,@food ,@arsenal))


;; Direction Options

(define decisiontable `((1 ((east) 2) ,@actions)
                        (2 ((south) 10) ((north) 4) ((east) 3)
                           ((west) 1) ,@actions)
                        (3 ((west) 2) ((east) 5) ,@actions)
                        (4 ((north west) 6) ((north east) 7)
                           ((south) 2) ((south east) 5) ,@actions)
                        (5 ((north east) 8) ((south east) 9)
                           ((west) 3) ((north) 4) ((south) 10) ,@actions)
                        (6 ((south) 4) ,@actions)
                        (7 ((south) 4) ,@actions)
                        (8 ((west) 5) ,@actions)
                        (9 ((west) 5) ,@actions)
                        (10 ((west) 11) ((north) 2) ((south) 12)
                            ((north east) 5) ,@actions)
                        (11 ((east) 10) ,@actions)
                        (12 ((north) 10) ,@actions)))
               

;; hash tables 
(define arsenaldb (make-hash))
(define fooddb (make-hash))
(define partnerdb (make-hash))
(define lightdb (make-hash))
(define opponentdb (make-hash))


;; check if has key options
(define (add-arsenal db id arsenal)
  (if (hash-has-key? db id)
      (let ((record (hash-ref db id)))
        (hash-set! db id (cons arsenal record)))
        (hash-set! db id (cons arsenal empty))))


(define (add-food db id food)
  (if (hash-has-key? db id)
      (let ((record (hash-ref db id)))
        (hash-set! db id (cons food record)))
        (hash-set! db id (cons food empty))))


(define (add-light db id light)
  (if (hash-has-key? db id)
      (let ((record (hash-ref db id)))
        (hash-set! db id (cons light record)))
        (hash-set! db id (cons light empty))))


(define (add-partner db id partner)
  (if (hash-has-key? db id)
      (let ((record (hash-ref db id)))
        (hash-set! db id (cons partner record)))
        (hash-set! db id (cons partner empty))))

(define (add-opponent db id opponent)
  (if (hash-has-key? db id)
      (let ((record (hash-ref db id)))
        (hash-set! db id (cons opponent record)))
        (hash-set! db id (cons opponent empty))))

;;
(define (add-arsenals db)
 (for-each
(lambda (r)  
(add-arsenal db (first r) (second r))) arsenal))

;;
(define (add-foods db)
  (for-each
(lambda (r)
(add-food db (first r) (second r))) food))

;;
(define (add-partners db)
  (for-each
(lambda (r)
(add-partner db (first r) (second r))) partner))

;;
(define (add-lights db)
  (for-each
    (lambda (r)
(add-food db (first r) (second r))) light))

(define (add-opponents db)
  (for-each
    (lambda (r)
(add-food db (first r) (second r))) opponent))

(add-arsenals arsenaldb)
(add-foods fooddb)
(add-partners partnerdb)
(add-lights lightdb)
(add-opponents opponentdb)



;; stock check of items available
(define (display-arsenals db id)
(when (hash-has-key? db id)
  
;;join string if multiple items

  (let* ((record (hash-ref db id))
        (output (string-join record " and " )))

    ;;depending on the parameter provide different answer

    (when (not (equal? output ""))
       (if (eq? id 'backpack)
         (printf "You have collected ~a.\n" output)
         (printf "You can observe ~a.\n" output))))))
        
                    
  ;;REFACTORED CODES
(define (remove-item-from-place db id str)
 (when (hash-has-key? db id)
   (let* ((record (hash-ref db id))
        (result (remove (lambda (x) (string-suffix-ci? str x)) record))

;;item is the difference with the previous lists e.g. the item collected

        (item (lset-difference equal? record result)))
  (cond ((null? item)
      (printf "I cant find the weapon!\n"))
    (else
      (printf "Added ~a to your backpack .\n" (first item))
      (add-weapon arsenaldb 'backpack (first item))
      (hash-set! db id result)))))

  
(when (hash-has-key? db 'backpack)
   (let* ((record (hash-ref db 'backpack))
         (result (remove (lambda (x) (string-suffix-ci? str x)) record))
         (item (lset-difference equal? record result)))
  (cond ((null? item)
        (printf "You are not qualified for this weapon!\n"))
      (else
        (printf "Lost ~a from your arsenal!\n" (first item))
        (add-weapon arsenaldb id (first item))
        (hash-set! db 'backpack result))))))

(define (show-enemies db id)
    (when (hash-has-key? db id) ;;join string if multiple enemies
        (let* ((record (hash-ref db id))
        (output (string-join record " and " ))) ;;parameter provide different answer
(when (not (equal? output ""))
    (if (eq? id 'rival)
        (printf "Well done, you have destroyed ~a. \n" output)
        (printf "You can observe ~a. \n" output))))))




;(define (get-directions id)
;  (let ((record (assq id decisiontable)))
;    (let ((result (filter (lambda (n) (number? (second n))) (cdr record))))
;      (printf "You can see exits to the ")nor
;      (for-each (lambda (direction) (printf "~a " (first direction))) result))
;      (printf "\n")))


(define (remove-object-from-room db id str)
  (when (hash-has-key? db id)
    (let* ((record (hash-ref db id))
          (result (remove (lambda (x) (string-suffix-ci? str x)) record))
      
;;item is the difference with the previous lists e.g. the item collected
      (item (lset-difference equal? record result)))
  (cond ((null? item)
        (printf "I don't see that enemy in the Room!\n"))
      (else
        (printf "killed ~a to your bag.\n" (first item))
        (hash-set! db id result))))))


;;(define (display-enemies db id)
 ;;  (when (hash-has-key? db id) ;;join string if multiple enemies
   ;;    (let* ((record (hash-ref db id))
     ;;  (output (string-join record " and "))) ;;parameter provide different answer
   ;; (when (not (equal? output ""))
     ;;  (if (eq? id 'ene) ;;change to rival
       ;;(printf "You have killed ~a. \n" output)
      ;; (printf "you can see ~a. \n" output))))))


;;REFACTORED CODE HERE

;;(define (remove-rival-from-game db id str)
  ;;(when (hash-has-key? db id)
    ;;(let* ((record (hash-ref db id))
      ;; (result (remove (lambda (x) (string-suffix-ci? str x)) record))
       ;;(item (lset-difference equal? record result)))

  ;;(cond ((null? item)
    ;;   (printf "Enemy no longer in the Room!\n"))
      ;; (else
        ;; (printf "killed ~a.\n" (first item))
        ;; (hash-set! db 'bag result))))))



(define (pick-partner id input)
   (let ((item (string-join (cdr (string-split input)))))
       (remove-partner-from-place partnerdb id item)))

(define (food-item id input)
    (let ((item (string-join (cdr (string-split input)))))
       (remove-food-from-room fooddb id item)))

(define (arsenal-item id input)
    (let ((item (string-join (cdr (string-split input)))))
       (remove-weapon-from-room arsenaldb id item)))

(define (fire-item id input)
    (let ((item (string-join (cdr (string-split input)))))
       (remove-light-from-room lightdb id item)))


(define (have-eat id input)
   (printf "You have eaten"))

(define (have-climb id input)
   (printf "You have climbed"))

(define (have-sit id input)
   (printf "You are Seated on the Pool Chair"))

(define (display-inventory)
   (display-objects inventorydb 'bag))

(define (slist->string l)
   (string-join (map symbol->string l)))

(define (get-directions id)
   (let ((record (assq id decisiontable)))
   (let* ((result (filter (lambda (n) (number? (second n)))
         (cdr record))) (n (length result)))
  (cond ((= 0 n)
      (printf "You appear to have entered a room with no exist.\n"))
        ((= 1 n)
      (printf "You can see an exit to the ~a.\n" (slist->string
   (caar result))))
       (else


(let* ((losym (map (lambda (x) (car x)) result))
       (lostr (map (lambda (x) (slist->string x)) losym)))
(printf "You can exit to the ~a. \n"  
        (string-join lostr  " and "))))))))



;; REFACTORED FUNCTION
(define (assq-ref assqlist id) ;;information for requested option
(cdr (assq id assqlist)))

;; description for the option user selects
(define (get-description id)
(car (assq-ref descriptions id)))

(define (get-keywords id)
(let ((keys (assq-ref decisiontable id)))
(map (lambda (key) (car key)) keys)))

;; This function will return the length of a list. ;; outputs a list in the form: (0 0 0 2 0 0)
(define (list-of-lengths keylist tokens)
(map
 (lambda(x)
(let ((set (lset-intersection eq? tokens x)))
  
;; apply some weighting to the result
(* (/ (length set) (length x)) (length set))))
keylist))

;; Return the index of the largest number in a list.
(define (index-of-largest-number list-of-numbers)
  (let ((n (car (sort list-of-numbers >))))
     (if (zero? n)
         #f
         (list-index (lambda (x) (eq? x n)) list-of-numbers))))

(define (lookup id tokens)
(let* ((record (assq-ref decisiontable id))
(keylist (get-keywords id))
(index (index-of-largest-number (list-of-lengths keylist tokens))))

  (if index
      (cadr (list-ref record index))
         #f)))


(define (display-description id)
  (printf "~a. \n" (get-description id)))

;;Game starts function is defined here
(define (startgame initial-id)
   (let loop ((id initial-id) (description #t))
      (when description
        (display-description id)
        (display-objects objectdb id)
        (display-enemies enemydb id)
         (printf "> "))

     ;;error message
(let* ((input (read-line))
    (string-tokens (string-tokenize input))
    (tokens (map string->symbol string-tokens)))
  
(let ((response (lookup id tokens)))
(cond ((number? response)
       (loop response #t))
  ((eq? #f response)
    (printf "huh? I didn't understand that!\n")
    (loop id #f))

  ((eq? response 'look)
   (get-directions id)
   (loop id #t))

  ((eq? response 'fight)
   (pick-item id input
   (loop id #f))

  ((eq? response 'run)
   ((have-shower id input)
   (loop id #f))

  ((eq? response 'food)
   ((have-shower id input)
   (loop id #f))

  ((eq? response 'climb)
   (have-sit id input)
   (loop id #f))

  ((eq? response 'arsenal)
   (fight-enemy id input)
   (loop id #f))

  ((eq? response 'partner)
   (put-item id input)
   (loop id #f))


  ((eq? response 'quit)
   (printf "Goodbye...\n")
   (exit)))))))
  
 (startgame 1)
